#include <iostream> class TreeNode { public: int value; TreeNode* left; TreeNode* right; TreeNode(int val) : value(val), left(nullptr), right(nullptr) {} }; class BinarySearchTree { private: TreeNode* root; void insert(TreeNode*& node, int val) { if (!node) { node = new TreeNode(val); } else if (val < node->value) { insert(node->left, val); } else { insert(node->right, val); } } void inOrderTraversal(TreeNode* node) { if (node) { inOrderTraversal(node->left); std::cout << node->value << " "; inOrderTraversal(node->right); } } public: BinarySearchTree() : root(nullptr) {} void insert(int val) { insert(root, val); } void printInOrder() { inOrderTraversal(root); std::cout << std::endl; } }; int main() { BinarySearchTree bst; bst.insert(5); bst.insert(3); bst.insert(7); bst.insert(2); bst.insert(4); std::cout << "Values in the tree (in-order): "; bst.printInOrder(); return 0; }
